Name:Unnati Katore
Batch 5
Assignmnet No 1

1. To display the current working directory, the command is: pwd
Output:[admin@hostname01 ~]$ pwd
/home/admin

2. Display the path to and name of your HOME directory.
Output:[admin@hostname01 ~]$ echo $HOME
/home/admin

3. Display the login name using which you have logged into the system
Output:[admin@hostname01 ~]$ whoami
admin

4. Display the hidden files of your current directory.
output:[admin@hostname01 ~]$ ls -a
.              .bash_logout   .cache   Documents  .local    Pictures   Videos
..             .bash_profile  .config  Downloads  .mozilla  Public     .viminfo
.bash_history  .bashrc        Desktop  .lesshst   Music     Templates

5. List the names of all the files in your home directory.
Output:[admin@hostname01 ~]$ ls
Desktop  Documents  Downloads  Music  Pictures  Public  Templates  Videos

6. Using the long listing format to display the files in your directory.
Output: tes
[admin@hostname01 ~]$ ls -l
total 0
drwxr-xr-x. 2 admin admin  6 Dec 24 19:53 Desktop
drwxr-xr-x. 2 admin admin  6 Aug 25  2022 Documents
drwxr-xr-x. 2 admin admin 50 Aug 25  2022 Downloads
drwxr-xr-x. 2 admin admin  6 Aug 25  2022 Music
drwxr-xr-x. 2 admin admin  6 Aug 25  2022 Pictures
drwxr-xr-x. 2 admin admin  6 Aug 25  2022 Public
drwxr-xr-x. 2 admin admin  6 Aug 25  2022 Templates
drwxr-xr-x. 2 admin admin  6 Aug 25  2022 Videos

7. List the files beginning with chap followed by any number or any lower case

alphabet. (Example , it should display all files whose names are like chap1, chap2,

chap3 ……., chapa,ahapb,chapc,……..)
Output: 

8. Give appropriate command to create a directory called C_prog under your home

directory. (Note: Check the directory using ls )
Output: [admin@hostname01 ~]$ mkdir ~C_prog
[admin@hostname01 ~]$ ls
'~C_prog'   Documents   Music      Public      Videos
 Desktop    Downloads   Pictures   Templates

9. Create the following directories under your home directory. (Note: Check using ls )

newdir

newdirectory
Output: [admin@hostname01 ~]$ mkdir ~/newdir ~/newDirectory
[admin@hostname01 ~]$ ls
'~C_prog'   Documents   Music    newDirectory   Public      Videos
 Desktop    Downloads   newdir   Pictures       Templates

10. List the names of all the files, including the contents of the sub directories under

your home directory.
Output:[admin@hostname01 ~]$ ls
'~C_prog'   Documents   Music    newDirectory   Public      Videos
 Desktop    Downloads   newdir   Pictures       Templates
[admin@hostname01 ~]$ ls -R ~
/home/admin:
'~C_prog'   Documents   Music    newDirectory   Public      Videos
 Desktop    Downloads   newdir   Pictures       Templates

/home/admin/~C_prog:

/home/admin/Desktop:

/home/admin/Documents:

/home/admin/Downloads:
photo-1603366615917-1fa6dad5c4fa.jpg

/home/admin/Music:

/home/admin/newdir:

/home/admin/newDirectory:

/home/admin/Pictures:

/home/admin/Public:

/home/admin/Templates:

/home/admin/Videos:

11. Remove the directory called newdirectory from your working directory.
Output:[admin@hostname01 ~]$ rmdir newDirectory
[admin@hostname01 ~]$ ls
'~C_prog'   Documents   Music    Pictures   Templates
 Desktop    Downloads   newdir   Public     Videos

12. Create a directory called temp under your home directory.
Output:[admin@hostname01 ~]$  mkdir ~/temp
[admin@hostname01 ~]$ ls
'~C_prog'   Documents   Music    Pictures   temp        Videos
 Desktop    Downloads   newdir   Public     Templates

13.Remove the directory called newdir under your home directory and verify the

above with the help of the directory listing command.
Output: [admin@hostname01 ~]$ rmdir ~/newdir
[admin@hostname01 ~]$ ls
'~C_prog'   Desktop   Documents   Downloads   Music   Pictures   Public   temp   Templates   Videos

14. Create another directory directorynew under the temp directory.
Output:
[admin@hostname01 ~]$ mkdir ~/temp
mkdir: cannot create directory ‘/home/admin/temp’: File exists
[admin@hostname01 ~]$ mkdir ~/temp/directorynew
[admin@hostname01 ~]$ ls ~/temp
directorynew

15. Change the directory to your home directory.
Output: [admin@hostname01 ~]$ cd~
bash: cd~: command not found...

16. From your home directory, change the directory to directorynew using relative and

absolute path.
Output: [admin@hostname01 ~]$ cd ~/temp/directorynew
[admin@hostname01 directorynew]$ cd temp/directorynew
[admin@hostname01 directorynew]$ pwd
/home/admin/temp/directorynew

17. Remove the directory called c_prog, which is in your home directory.
Output: [admin@hostname01 ~]$ rm -r ~/C_prog

18. Change to the directory /etc and display the files present in it.
Output: [admin@hostname01 ~]$ cd /etc
[admin@hostname01 etc]$ 

19. List the names of all the files that begin with a dot in the /usr/bin directory.
Output: [admin@hostname01 ~]$ ls -a/usr/bin | grep '^\.'

20. Create a file first.unix with the following contents.

Hi! Good Morning everybody.

Welcome to the First exercise on UNIX.

Hope you enjoy doing the assignments.
Output: [admin@hostname01 ~]$ echo " Hi! Good Morning Everybody .\nWelcome to the first exercise on UNIX.\nHope you enjoy the assinment."
 Hi! Good Morning Everybody .\nWelcome to the first exercise on UNIX.\nHope you enjoy the assinment.

21. Copy the file first.unix in your home directory to first.unics.
Output: [admin@hostname01 ~]$ cp first.unix ~/first.unics
[admin@hostname01 ~]$ ls ~
'~C_prog'   Desktop   Documents   Downloads   first.unics   first.unix   Music   Pictures   Public   temp   Templates   Videos

22. List the contents of first.unix and first.unics with a single command.
Output: [admin@hostname01 ~]$ cat first.unix first.unics
hj
heip
hj
heip

23. Create a new directory under the temp directory.
Output:[admin@hostname01 ~]$ ls ~/temp
directorynew  new_directory

24. From your home directory, copy all the files to the directory created under the

temp sub directory.
Output: [admin@hostname01 ~]$ cp ~/* ~/temp/new_directory/
cp: -r not specified; omitting directory '/home/admin/~C_prog'
cp: -r not specified; omitting directory '/home/admin/Desktop'
cp: -r not specified; omitting directory '/home/admin/Documents'
cp: -r not specified; omitting directory '/home/admin/Downloads'
cp: -r not specified; omitting directory '/home/admin/Music'
cp: -r not specified; omitting directory '/home/admin/Pictures'
cp: -r not specified; omitting directory '/home/admin/Public'
cp: -r not specified; omitting directory '/home/admin/temp'
cp: -r not specified; omitting directory '/home/admin/Templates'
cp: -r not specified; omitting directory '/home/admin/Videos'

25. Move the file first.unix to the directory temp as second.unix
Output:[admin@hostname01 ~]$ mv first.unix ~/temp/second.unix
[admin@hostname01 ~]$ ls ~/temp
directorynew  new_directory  second.unix

26. Remove the file called first.unics from the home directory.
Output:[admin@hostname01 ~]$ rm ~/first.unics
[admin@hostname01 ~]$ ls
'~C_prog'   Desktop   Documents   Downloads   Music   Pictures   Public   temp   Templates   Videos

27. Change your directory to temp and issue the command rm *. What do you observe?
Output:[admin@hostname01 ~]$ cd ~/temp
[admin@hostname01 temp]$ rm *
rm: cannot remove 'directorynew': Is a directory
rm: cannot remove 'new_directory': Is a directory

 Observation: rm remove all files but not directories

28. Move all files whose names end with a, c and o to the HOME directory.
Output: [admin@hostname01 temp]$ mv ~/temp/*[aco]~/

29. Copy all files that end with a ‘UNIX’ to the temp directory.
Output: [admin@hostname01 temp]$ cp ~/*UNIX ~/temp/

30. Issuing a single command, remove all the files from the directory temp and the

directory itself.
Output: [admin@hostname01 temp]$ rm -rf ~/temp
[admin@hostname01 temp]$ ls
[admin@hostname01 temp]$ ls ~
'~C_prog'   Desktop   Documents   Downloads   Music   Pictures   Public   Templates   Videos

31. Try commands cp and mv with invalid number of arguments and note the results.
Output:[admin@hostname01 temp]$ cp [source] [destination]
cp: cannot stat '[source]': No such file or directory
observation: if we use cp mv without correct nimber of arguments we get an error

32. Use the cat command to create a file friends, with the following data:


Madhu 6966456 09/07/68

Jamil 2345215 08/09/67

Ajay 5546785 01/04/66

Mano 7820022 09/07/68

David 8281292 09/09/60

Simmi 7864563 12/12/70

Navin 2224311 30/05/68


The fields should be separated by a tab.
Output: 
[admin@hostname01 ~]$ cat > friends
    	Madhu	6966456		09/07/68				
	jamil	2345215		08/09/67
	Ajay	5546785		01/04/66
	Mano	7820022		09/07/68
	David	1234564		08/08/89
	Simmi	9876567		06/09/79
	Navin	6788764		30/05/89


    	Madhu	6966456		09/07/68				
	jamil	2345215		08/09/67
	Ajay	5546785		01/04/66
	Mano	7820022		09/07/68
	David	1234564		08/08/89
	Simmi	9876567		06/09/79
	Navin	6788764		30/05/89

33. Display contents of the file friends.

Output:
[admin@hostname01 ~]$ cat friends
  	Madhu	6966456		09/07/68
	jamil	2345215		08/09/67
	Ajay	5546785		01/04/66
	Mano	7820022		09/07/68
	David	1234564		08/08/89
	Simmi	9876567		06/09/79
	Navin	6788764		30/05/89

34. Copy contents of friends to newfriend without using the cp command.
Output:admin@hostname01 ~]$ cat friends>new friends
[admin@hostname01 ~]$ cat friends | tee new friends >/dev/null
[admin@hostname01 ~]$ dd if=friends of =new friends

[admin@hostname01 ~]$ cat new friends
  	Madhu	6966456		09/07/68
	jamil	2345215		08/09/67
	Ajay	5546785		01/04/66
	Mano	7820022		09/07/68
	David	1234564		08/08/89
	Simmi	9876567		06/09/79
	Navin	6788764		30/05/89

35. Display contents of the file friends and newfriends in a single command.
Output:[admin@hostname01 ~]$ cat friends>newfriends
[admin@hostname01 ~]$ cat friends newfriends
  	Madhu	6966456		09/07/68
	jamil	2345215		08/09/67
	Ajay	5546785		01/04/66
	Mano	7820022		09/07/68
	David	1234564		08/08/89
	Simmi	9876567		06/09/79
	Navin	6788764		30/05/89  	Madhu	6966456		09/07/68
	jamil	2345215		08/09/67
	Ajay	5546785		01/04/66
	Mano	7820022		09/07/68
	David	1234564		08/08/89
	Simmi	9876567		06/09/79
	Navin	6788764		30/05/89

36. Find all users currently working on the system and store the output in a file named
as users.
Output:[admin@hostname01 ~]$ who>users
[admin@hostname01 ~]$ w>users
[admin@hostname01 ~]$ cat users
 08:36:07 up 20:13,  2 users,  load average: 0.00, 0.00, 0.00
USER     TTY        LOGIN@   IDLE   JCPU   PCPU WHAT
admin    seat0     Mon12    0.00s  0.00s  0.00s /usr/libexec/gdm-wayland-session env GNOME_SHELL_SESSION_MODE=classic gnome-session
admin    tty2      Mon12   20:13m  0.05s  0.05s /usr/libexec/gnome-session-binary

37. Append contents of friends file to the file, users.
Output:[admin@hostname01 ~]$ cat friends>>users
[admin@hostname01 ~]$ cat users
 08:36:07 up 20:13,  2 users,  load average: 0.00, 0.00, 0.00
USER     TTY        LOGIN@   IDLE   JCPU   PCPU WHAT
admin    seat0     Mon12    0.00s  0.00s  0.00s /usr/libexec/gdm-wayland-session env GNOME_SHELL_SESSION_MODE=classic gnome-session
admin    tty2      Mon12   20:13m  0.05s  0.05s /usr/libexec/gnome-session-binary
  	Madhu	6966456		09/07/68
	jamil	2345215		08/09/67
	Ajay	5546785		01/04/66
	Mano	7820022		09/07/68
	David	1234564		08/08/89
	Simmi	9876567		06/09/79
	Navin	6788764		30/05/89

38. Display current system date and time and record your observations. How is the

time displayed?
Output:[admin@hostname01 ~]$ date
Tue Jan 28 08:42:40 AM IST 2025
[admin@hostname01 ~]$ date "+%Y-%m-%d %H:%M:%S"
2025-01-28 08:43:34
Observation: in first command it display date default format 
in second one includes days of week,the month,the date,the time

39. Display calendar for the month and year of your birth.
Output:[admin@hostname01 ~]$ cal 02 2002
    February 2002   
Su Mo Tu We Th Fr Sa
                1  2
 3  4  5  6  7  8  9
10 11 12 13 14 15 16
17 18 19 20 21 22 23
24 25 26 27 28  

40. Try following commands and record your observations.

date “+ %”

date “+%m”

date “+%D”

date “+%/%Training Activity”

date “+%Training Activity”

date “+%r”
Output: 
1.[admin@hostname01 ~]$ date "+ %"
 %
Observation: % symbol is used to display date/time format
2. [admin@hostname01 ~]$ date "+%m"
01
Observation: display month of current date in two digit
3.[admin@hostname01 ~]$ date "+%D"
01/28/25
Observation:%D is the format of mm/dd/yy
4.[admin@hostname01 ~]$ date "+%/%Training Activity"
%/08:55:46raining Activity
Observation: show an error
5.[admin@hostname01 ~]$ date "+%Training Activity"
08:57:11raining Activity
Observation:error
6.[admin@hostname01 ~]$ date "+%r"
08:58:25 AM
Observation r display the time in 12 hour format


          Using Pipes And Filters

1: Redirect the content of the help document ls, into a file called as lsdo
[admin@hostname01 ~]$ man ls>lsdoc
[admin@hostname01 ~]$ cat lsdoc
LS(1)                                                                 User Commands                                                                 LS(1)

NAME
       ls - list directory contents

SYNOPSIS
       ls [OPTION]... [FILE]...

DESCRIPTION
       List information about the FILEs (the current directory by default).  Sort entries alphabetically if none of -cftuvSUX nor --sort is specified.

       Mandatory arguments to long options are mandatory for short options too.

       -a, --all
              do not ignore entries starting with .

       -A, --almost-all
              do not list implied . and ..

       --author
              with -l, print the author of each file

       -b, --escape
              print C-style escapes for nongraphic characters

       --block-size=SIZE
              with -l, scale sizes by SIZE when printing them; e.g., '--block-size=M'; see SIZE format below

       -B, --ignore-backups
              do not list implied entries ending with ~

       -c     with -lt: sort by, and show, ctime (time of last modification of file status information); with -l: show ctime and sort by name; otherwise:
              sort by ctime, newest first

       -C     list entries by columns

       --color[=WHEN]
              colorize the output; WHEN can be 'always' (default if omitted), 'auto', or 'never'; more info below

       -d, --directory
              list directories themselves, not their contents

       -D, --dired
              generate output designed for Emacs' dired mode

       -f     do not sort, enable -aU, disable -ls --color

       -F, --classify
              append indicator (one of */=>@|) to entries

       --file-type
              likewise, except do not append '*'

       --format=WORD
              across -x, commas -m, horizontal -x, long -l, single-column -1, verbose -l, vertical -C

       --full-time
              like -l --time-style=full-iso

       -g     like -l, but do not list owner

       --group-directories-first
              group directories before files;

              can be augmented with a --sort option, but any use of --sort=none (-U) disables grouping

       -G, --no-group
              in a long listing, don't print group names

       -h, --human-readable
              with -l and -s, print sizes like 1K 234M 2G etc.

       --si   likewise, but use powers of 1000 not 1024

       -H, --dereference-command-line
              follow symbolic links listed on the command line

       --dereference-command-line-symlink-to-dir
              follow each command line symbolic link

              that points to a directory

       --hide=PATTERN
              do not list implied entries matching shell PATTERN (overridden by -a or -A)

       --hyperlink[=WHEN]
              hyperlink file names; WHEN can be 'always' (default if omitted), 'auto', or 'never'

       --indicator-style=WORD
              append indicator with style WORD to entry names: none (default), slash (-p), file-type (--file-type), classify (-F)

       -i, --inode
              print the index number of each file

       -I, --ignore=PATTERN
              do not list implied entries matching shell PATTERN

       -k, --kibibytes
              default to 1024-byte blocks for disk usage; used only with -s and per directory totals

       -l     use a long listing format

       -L, --dereference
              when showing file information for a symbolic link, show information for the file the link references rather than for the link itself

       -m     fill width with a comma separated list of entries

       -n, --numeric-uid-gid
              like -l, but list numeric user and group IDs

       -N, --literal
              print entry names without quoting

       -o     like -l, but do not list group information

       -p, --indicator-style=slash
              append / indicator to directories

       -q, --hide-control-chars
              print ? instead of nongraphic characters

       --show-control-chars
              show nongraphic characters as-is (the default, unless program is 'ls' and output is a terminal)

       -Q, --quote-name
              enclose entry names in double quotes

       --quoting-style=WORD
              use quoting style WORD for entry names: literal, locale, shell, shell-always, shell-escape, shell-escape-always, c, escape (overrides QUOT‐
              ING_STYLE environment variable)

       -r, --reverse
              reverse order while sorting

       -R, --recursive
              list subdirectories recursively

       -s, --size
              print the allocated size of each file, in blocks

       -S     sort by file size, largest first

       --sort=WORD
              sort by WORD instead of name: none (-U), size (-S), time (-t), version (-v), extension (-X)

       --time=WORD
              change  the  default of using modification times; access time (-u): atime, access, use; change time (-c): ctime, status; birth time: birth,
              creation;

              with -l, WORD determines which time to show; with --sort=time, sort by WORD (newest first)

       --time-style=TIME_STYLE
              time/date format with -l; see TIME_STYLE below

       -t     sort by time, newest first; see --time

       -T, --tabsize=COLS
              assume tab stops at each COLS instead of 8

       -u     with -lt: sort by, and show, access time; with -l: show access time and sort by name; otherwise: sort by access time, newest first

       -U     do not sort; list entries in directory order

       -v     natural sort of (version) numbers within text

       -w, --width=COLS
              set output width to COLS.  0 means no limit

       -x     list entries by lines instead of by columns

       -X     sort alphabetically by entry extension

       -Z, --context
              print any security context of each file

       -1     list one file per line.  Avoid '\n' with -q or -b

       --help display this help and exit

       --version
              output version information and exit

       The SIZE argument is an integer and optional unit (example: 10K is 10*1024).  Units are K,M,G,T,P,E,Z,Y (powers of 1024) or KB,MB,...  (powers  of
       1000).  Binary prefixes can be used, too: KiB=K, MiB=M, and so on.

       The  TIME_STYLE  argument  can  be full-iso, long-iso, iso, locale, or +FORMAT.  FORMAT is interpreted like in date(1).  If FORMAT is FORMAT1<new‐
       line>FORMAT2, then FORMAT1 applies to non-recent files and FORMAT2 to recent files.  TIME_STYLE prefixed with 'posix-' takes effect  only  outside
       the POSIX locale.  Also the TIME_STYLE environment variable sets the default style to use.

       Using color to distinguish file types is disabled both by default and with --color=never.  With --color=auto, ls emits color codes only when stan‐
       dard output is connected to a terminal.  The LS_COLORS environment variable can change the settings.  Use the dircolors command to set it.

   Exit status:
       0      if OK,

       1      if minor problems (e.g., cannot access subdirectory),

       2      if serious trouble (e.g., cannot access command-line argument).

AUTHOR
       Written by Richard M. Stallman and David MacKenzie.

REPORTING BUGS
       GNU coreutils online help: <https://www.gnu.org/software/coreutils/>
       Report any translation bugs to <https://translationproject.org/team/>

COPYRIGHT
       Copyright © 2020 Free Software Foundation, Inc.  License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       Full documentation <https://www.gnu.org/software/coreutils/ls>
       or available locally via: info '(coreutils) ls invocation'

GNU coreutils 8.32                                                    December 2024                                                                 LS(1)
[admin@



[admin@hostname01 ~]$ man ls>lsdoc
[admin@hostname01 ~]$ cat lsdoc
LS(1)                                                                 User Commands                                                                 LS(1)

NAME
       ls - list directory contents

SYNOPSIS
       ls [OPTION]... [FILE]...

DESCRIPTION
       List information about the FILEs (the current directory by default).  Sort entries alphabetically if none of -cftuvSUX nor --sort is specified.

       Mandatory arguments to long options are mandatory for short options too.

       -a, --all
              do not ignore entries starting with .

       -A, --almost-all
              do not list implied . and ..

       --author
              with -l, print the author of each file

       -b, --escape
              print C-style escapes for nongraphic characters

       --block-size=SIZE
              with -l, scale sizes by SIZE when printing them; e.g., '--block-size=M'; see SIZE format below

       -B, --ignore-backups
              do not list implied entries ending with ~

       -c     with -lt: sort by, and show, ctime (time of last modification of file status information); with -l: show ctime and sort by name; otherwise:
              sort by ctime, newest first

       -C     list entries by columns

       --color[=WHEN]
              colorize the output; WHEN can be 'always' (default if omitted), 'auto', or 'never'; more info below

       -d, --directory
              list directories themselves, not their contents

       -D, --dired
              generate output designed for Emacs' dired mode

       -f     do not sort, enable -aU, disable -ls --color

       -F, --classify
              append indicator (one of */=>@|) to entries

       --file-type
              likewise, except do not append '*'

       --format=WORD
              across -x, commas -m, horizontal -x, long -l, single-column -1, verbose -l, vertical -C

       --full-time
              like -l --time-style=full-iso

       -g     like -l, but do not list owner

       --group-directories-first
              group directories before files;

              can be augmented with a --sort option, but any use of --sort=none (-U) disables grouping

       -G, --no-group
              in a long listing, don't print group names

       -h, --human-readable
              with -l and -s, print sizes like 1K 234M 2G etc.

       --si   likewise, but use powers of 1000 not 1024

       -H, --dereference-command-line
              follow symbolic links listed on the command line

       --dereference-command-line-symlink-to-dir
              follow each command line symbolic link

              that points to a directory

       --hide=PATTERN
              do not list implied entries matching shell PATTERN (overridden by -a or -A)

       --hyperlink[=WHEN]
              hyperlink file names; WHEN can be 'always' (default if omitted), 'auto', or 'never'

       --indicator-style=WORD
              append indicator with style WORD to entry names: none (default), slash (-p), file-type (--file-type), classify (-F)

       -i, --inode
              print the index number of each file

       -I, --ignore=PATTERN
              do not list implied entries matching shell PATTERN

       -k, --kibibytes
              default to 1024-byte blocks for disk usage; used only with -s and per directory totals

       -l     use a long listing format

       -L, --dereference
              when showing file information for a symbolic link, show information for the file the link references rather than for the link itself

       -m     fill width with a comma separated list of entries

       -n, --numeric-uid-gid
              like -l, but list numeric user and group IDs

       -N, --literal
              print entry names without quoting

       -o     like -l, but do not list group information

       -p, --indicator-style=slash
              append / indicator to directories

       -q, --hide-control-chars
              print ? instead of nongraphic characters

       --show-control-chars
              show nongraphic characters as-is (the default, unless program is 'ls' and output is a terminal)

       -Q, --quote-name
              enclose entry names in double quotes

       --quoting-style=WORD
              use quoting style WORD for entry names: literal, locale, shell, shell-always, shell-escape, shell-escape-always, c, escape (overrides QUOT‐
              ING_STYLE environment variable)

       -r, --reverse
              reverse order while sorting

       -R, --recursive
              list subdirectories recursively

       -s, --size
              print the allocated size of each file, in blocks

       -S     sort by file size, largest first

       --sort=WORD
              sort by WORD instead of name: none (-U), size (-S), time (-t), version (-v), extension (-X)

       --time=WORD
              change  the  default of using modification times; access time (-u): atime, access, use; change time (-c): ctime, status; birth time: birth,
              creation;

              with -l, WORD determines which time to show; with --sort=time, sort by WORD (newest first)

       --time-style=TIME_STYLE
              time/date format with -l; see TIME_STYLE below

       -t     sort by time, newest first; see --time

       -T, --tabsize=COLS
              assume tab stops at each COLS instead of 8

       -u     with -lt: sort by, and show, access time; with -l: show access time and sort by name; otherwise: sort by access time, newest first

       -U     do not sort; list entries in directory order

       -v     natural sort of (version) numbers within text

       -w, --width=COLS
              set output width to COLS.  0 means no limit

       -x     list entries by lines instead of by columns

       -X     sort alphabetically by entry extension

       -Z, --context
              print any security context of each file

       -1     list one file per line.  Avoid '\n' with -q or -b

       --help display this help and exit

       --version
              output version information and exit

       The SIZE argument is an integer and optional unit (example: 10K is 10*1024).  Units are K,M,G,T,P,E,Z,Y (powers of 1024) or KB,MB,...  (powers  of
       1000).  Binary prefixes can be used, too: KiB=K, MiB=M, and so on.

       The  TIME_STYLE  argument  can  be full-iso, long-iso, iso, locale, or +FORMAT.  FORMAT is interpreted like in date(1).  If FORMAT is FORMAT1<new‐
       line>FORMAT2, then FORMAT1 applies to non-recent files and FORMAT2 to recent files.  TIME_STYLE prefixed with 'posix-' takes effect  only  outside
       the POSIX locale.  Also the TIME_STYLE environment variable sets the default style to use.

       Using color to distinguish file types is disabled both by default and with --color=never.  With --color=auto, ls emits color codes only when stan‐
       dard output is connected to a terminal.  The LS_COLORS environment variable can change the settings.  Use the dircolors command to set it.

   Exit status:
       0      if OK,

       1      if minor problems (e.g., cannot access subdirectory),

       2      if serious trouble (e.g., cannot access command-line argument).

AUTHOR
       Written by Richard M. Stallman and David MacKenzie.

REPORTING BUGS
       GNU coreutils online help: <https://www.gnu.org/software/coreutils/>
       Report any translation bugs to <https://translationproject.org/team/>

COPYRIGHT
       Copyright © 2020 Free Software Foundation, Inc.  License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       Full documentation <https://www.gnu.org/software/coreutils/ls>
       or available locally via: info '(coreutils) ls invocation'

GNU coreutils 8.32                                                    December 2024                                                                 LS(1)

2: Display the content of the lsdoc page wise.
Output:  [admin@hostname01 ~]$ less lsdoc

LS(1)                                                                 User Commands                                                                 LS(1)

NAME
       ls - list directory contents

SYNOPSIS
       ls [OPTION]... [FILE]...

DESCRIPTION
       List information about the FILEs (the current directory by default).  Sort entries alphabetically if none of -cftuvSUX nor --sort is specified.

       Mandatory arguments to long options are mandatory for short options too.

       -a, --all
              do not ignore entries starting with .

       -A, --almost-all
              do not list implied . and ..

       --author
              with -l, print the author of each file
lsdoc

3: Create a file data.txt using input redirection.
Output:[admin@hostname01 ~]$ cat data.txt
[admin@hostname01 ~]$ cat > data.txt
hi My name is unati
hi my name is Unnati

4: Display data.txt.
Output:[admin@hostname01 ~]$ cat data.txt
hi My name is unati
hi my name is Unnati

5: Remove the file data.txt.
Output:[admin@hostname01 ~]$ rm data.txt


6: Use error redirection to display data.txt, if any error stores it in errorlog.txt
Output:[admin@hostname01 ~]$ cat nonexixtentfile.txt 2>errorlog.txt


7: Display errorlog file.
Output:[admin@hostname01 ~]$ cat errorlog.txt
cat: nonexixtentfile.txt: No such file or directory





